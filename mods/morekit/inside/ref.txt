			case "hackinterviews":
									var n = new Notification(
									{
										header: "Dissing the fans".dlocalize(modid),
										text: ("In a recent interview {0}, CEO of {1}, criticized their fans, saying they get way too excited for new games, and \"should just shut up for their own sake\".\n" +
												"{1} insist that {0} did not write this, or rather that \"this very insulting assertion wasn't made by anyone within the company\", but we don't know if that's simply a bad excuse or not.").dlocalize(modid).format(GameManager.company.staff[0].name, GameManager.company.name),
										weeksUntilFired: 1 + 2 * GameManager.company.getRandom()
									});
									n.adjustFans(-2500 - GameManager.company.fans / 30 * GameManager.company.getRandom());
									GameManager.company.notifications.push(n);
									
									dMultiplayer.sendStatus("SABOTAGD", "interviews hacked".dlocalize(modid));
									break;
									
									
									
									
											Achievements.hiNotCaughtAchievement =
		{
			id: "hiNotCaught",
			title: "Anomalous Materials".dlocalize(modid),
			description: "Hack a competitor's interviews without getting caught.".dlocalize(modid),
			tint: "#FDD017",
			value: 50
		};
		Achievements.rgNotCaughtAchievement =
		{
			id: "rgNotCaught",
			title: "Sapped".dlocalize(modid),
			description: "Corrupt a competitor's game in development without getting caught.".dlocalize(modid),
			tint: "#FDD017",
			value: 50
		};
		Achievements.assassinNotCaughtAchievement =
		{
			id: "assassinNotCaught",
			title: "My Faith In The Dagger".dlocalize(modid),
			description: "Assassinate a competitor's employee without getting caught.".dlocalize(modid),
			tint: "#E5E4E2",
			value: 80
		};
		
		Achievements.dlicence1Achievement =
		{
			id: "dlicence1",
			title: "Licence Money".dlocalize(modid),
			description: "Sell 5 console licences to your competitors.".dlocalize(modid),
			tint: "#FDD017",
			value: 50
		};
		Achievements.dlicence2Achievement =
		{
			id: "dlicence2",
			title: "Console Popularity".dlocalize(modid),
			description: "Sell 10 console licences to your competitors.".dlocalize(modid),
			tint: "#FDD017",
			value: 50
		};
		Achievements.dlicence3Achievement =
		{
			id: "dlicence3",
			title: "Third Party Support Master".dlocalize(modid),
			description: "Sell 20 console licences to your competitors.".dlocalize(modid),
			tint: "#E5E4E2",
			value: 80
		};
		
		
		
		f (mpstore.data.platformlicencessold == 5)
								Achievements.activate(Achievements.dlicence1Achievement);
							else if (mpstore.data.platformlicencessold == 10)
								Achievements.activate(Achievements.dlicence2Achievement);
							else if (mpstore.data.platformlicencessold == 20)
								Achievements.activate(Achievements.dlicence3Achievement);
								
								
								switch (type)
							{
								case "hackinterviews":
									setTimeout(function() { Achievements.activate(Achievements.hiNotCaughtAchievement); }, 15000);
									break;
								
								case "ruingame":
									setTimeout(function() { Achievements.activate(Achievements.rgNotCaughtAchievement); }, 15000);
									break;
								
								case "assassin":
									setTimeout(function() { Achievements.activate(Achievements.assassinNotCaughtAchievement); }, 15000);
							}
							
							
							
							
							case "hackinterviews":
									var n = new Notification(
									{
										header: "Dissing the fans".dlocalize(modid),
										text: ("In a recent interview {0}, CEO of {1}, criticized their fans, saying they get way too excited for new games, and \"should just shut up for their own sake\".\n" +
												"{1} insist that {0} did not write this, or rather that \"this very insulting assertion wasn't made by anyone within the company\", but we don't know if that's simply a bad excuse or not.").dlocalize(modid).format(GameManager.company.staff[0].name, GameManager.company.name),
										weeksUntilFired: 1 + 2 * GameManager.company.getRandom()
									});
									n.adjustFans(-2500 - GameManager.company.fans / 30 * GameManager.company.getRandom());
									GameManager.company.notifications.push(n);
									
									dMultiplayer.sendStatus("SABOTAGD", "interviews hacked".dlocalize(modid));
									break;
								
								case "ruingame":
									var n = new Notification(
									{
										header: "We've been hacked!".dlocalize(modid),
										text: "It seems like someone has broken into our servers and corrupted some of the files for the game in development. Police are investigating this matter...".dlocalize(modid)
									});
									GameManager.company.activeNotifications.addRange(n.split());
									
									GameManager.company.currentGame.designPoints *= 0.7 + 0.25 * GameManager.company.getRandom();
									GameManager.company.currentGame.technologyPoints *= 0.7 + 0.25 * GameManager.company.getRandom();
									VisualsManager.updatePoints();
									
									dMultiplayer.sendStatus("SABOTAGD", "project corrupted".dlocalize(modid));
									break;
									
									
									
									var n;
						if (result == 0)
						{
							n = new Notification(
							{
								header: "{0} trade".dlocalize(modid),
								text: "{0} accepted the offer.\n({1} research points <-> {2} cr.)".dlocalize(modid).format(company, rp, UI.getShortNumberString(money))
							});
							
							if (type == "reqrp")
							{
								GameManager.company.researchPoints += parseInt(rp);
								GameManager.company.adjustCash(-parseInt(money), "Trade");
							}
							else if (type == "reqcash")
							{
								GameManager.company.researchPoints -= parseInt(rp);
								GameManager.company.adjustCash(parseInt(money), "Trade");
							}
							VisualsManager.updatePoints();
						}
						else if (result == 1)
						{
							n = new Notification(
							{
								header: "{0} trade".dlocalize(modid),
								text: "{0} declined the offer.".dlocalize(modid)
							});
						}
						GameManager.company.activeNotifications.addRange(n.split());
					}
					break;
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					//GRAPHIQUE
					
					
						dMultiplayer.showAdvSpyWindow = function()
	{
		if (UI.isModalContentOpen()) return;
		
		UI.showModalContent("#advSpyDialog",
		{
			disableCheckForNotifications: true,
			close: true,
			onOpen: function()
			{
				var bmin = 500;
				var bmax = 2500;
				
				isTargetSelected = false;
				budgetFactor = (bmin / bmax) - 0.05;
				moneyToPay = bmin * 1000;
				
				if (moneyToPay > GameManager.company.cash)
				{
					$("#advSpyCost").css("color", "red");
					$("#advSpyButton").removeClass("orangeButton").addClass("disabledButton");
				}
				
				$("#advSpyBudgetSlider").empty();
				$("#advSpyBudgetSlider").append($("<div class=\"budgetSlider\"></div>").slider(
				{
					orientation: "horizontal",
					range: "min",
					min: bmin,
					max: bmax,
					value: bmin,
					animate: "fast",
					slide: function(event, ui)
					{
						if (ui)
						{
							budgetFactor = (ui.value / bmax) - 0.05;
							moneyToPay = ui.value * 1000;
							$("#advSpyBudgetSlider").slider("value", ui.value);
							$("#advSpyCost").html("Cost:".dlocalize(modid) + " " + UI.getShortNumberString(moneyToPay));
							
							if (GameManager.company.cash > moneyToPay)
							{
								$("#advSpyCost").css("color", "black");
								
								if ($("#advSpyButton").hasClass("disabledButton") && isTargetSelected)
									$("#advSpyButton").removeClass("disabledButton").addClass("orangeButton");
							}
							else
							{
								$("#advSpyCost").css("color", "red");
								
								if ($("#advSpyButton").hasClass("orangeButton"))
									$("#advSpyButton").removeClass("orangeButton").addClass("disabledButton");
							}
						}
					}
				}));
					
				$("#advSpyTargets").empty();
				var i = 0;
				competitors.forEach(function(compinarr)
				{
					var listitem = $("<div class=\"selectableGameFeatureItem\">" + compinarr.name + "</div>");
					listitem.val(i);
					listitem.clickExcl(function()
					{
						Sound.click();
						
						if (!listitem.hasClass("selectedFeature"))
						{
							$("#advSpyTargets").find(".selectedFeature").removeClass("selectedFeature");
							listitem.addClass("selectedFeature");
							
							if (GameManager.company.cash > moneyToPay)
								$("#advSpyButton").removeClass("disabledButton").addClass("orangeButton");
						}
						else
						{
							if ($("#advSpyButton").hasClass("orangeButton"))
								$("#advSpyButton").removeClass("orangeButton").addClass("disabledButton");
							
							listitem.removeClass("selectedFeature");
						}
					});
					$("#advSpyTargets").append(listitem);
					
					i++;
				});
			},
			onClose: function()
			{
				GameManager.resume(true);
			}
		});
	};
	
	
	
	
	//MEGA IMPORTANT
	oriShowMenu = UI.showContextMenu;
		var myShowMenu = function(b, f)
		{
			var selectedStaff = UI.getCharUnderCursor();
			var triggered = selectedStaff == GameManager.company.staff[0];
			
			if (triggered)
			{
				if (GameManager.company.researchCompleted.indexOf(tradeResearch) > -1)
				{
					b.push(
					{
						label: "Trading...".dlocalize(modid),
						action: function()
						{
							Sound.click();
							dMultiplayer.showTradeWindow();
							GameManager.resume(true);
						}
					});
				}
				if (GameManager.company.researchCompleted.indexOf(advancedSpyResearch) > -1)
				{
					b.push(
					{
						label: "Advanced spying...".dlocalize(modid),
						action: function()
						{
							Sound.click();
							dMultiplayer.showAdvSpyWindow();
							GameManager.resume(true);
						}
					});
				}
				if (GameManager.company.researchCompleted.indexOf(sabotageResearch) > -1)
				{
					b.push(
					{
						label: "Sabotage...".dlocalize(modid),
						action: function()
						{
							Sound.click();
							dMultiplayer.showSabotageWindow();
							GameManager.resume(true);
						}
					});
				}
			}
			
			oriShowMenu(b, f);
		};
		UI.showContextMenu = myShowMenu;
	
	
	
	
	
	
	//see
	
	dMultiplayer.tradeSliders = function(tmin, tmin2)
	{
		$("#tradeCost").html("Research Points:".dlocalize(modid) + " 0<br />" + "Cash:".dlocalize(modid) + " 0");
		RPToPay = 0;
		moneyToPay = 0;
		
		if (isTargetSelected)
		{
			var index = $("#tradeTargets").find(".selectedFeature").val();
			
			if ($("#tradeType").find(".selectedFeature").val() === 0)
			{
				tmax = competitors[index].rp;
				tmax2 = GameManager.company.cash;
				$("#tradeRPText").text("Research Points (request)".dlocalize(modid));
				$("#tradeCashText").text("Cash (offer)".dlocalize(modid));
			}
			else
			{
				tmax = GameManager.company.researchPoints;
				tmax2 = competitors[index].cash;
				$("#tradeRPText").text("Research Points (offer)".dlocalize(modid));
				$("#tradeCashText").text("Cash (request)".dlocalize(modid));
			}
		}
								
		$("#tradeRPSlider").empty();
		$("#tradeRPSlider").append($("<div class=\"budgetSlider\"></div>").slider(
		{
			orientation: "horizontal",
			range: "min",
			min: tmin,
			max: tmax,
			value: tmin,
			animate: "fast",
			slide: function(event, ui)
			{
				if (ui)
				{
					RPToPay = ui.value;
					$("#tradeRPSlider").slider("value", ui.value);
					$("#tradeCost").html("Research Points:".dlocalize(modid) + " " + RPToPay + "<br />" + "Cash:" + " " + UI.getShortNumberString(moneyToPay));
				}
			}
		}));
		
		$("#tradeCashSlider").empty();
		$("#tradeCashSlider").append($("<div class=\"budgetSlider\"></div>").slider(
		{
			orientation: "horizontal",
			range: "min",
			min: tmin2,
			max: tmax2,
			value: tmin2,
			animate: "fast",
			slide: function(event, ui)
			{
				if (ui)
				{
					moneyToPay = ui.value;
					$("#tradeCashSlider").slider("value", ui.value);
					$("#tradeCost").html("Research Points:".dlocalize(modid) + " " + RPToPay + "<br />" + "Cash:".dlocalize(modid) + " " + UI.getShortNumberString(moneyToPay));
				}
			}
		}));
	};